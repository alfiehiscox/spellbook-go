// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"
)

const createSpell = `-- name: CreateSpell :one
INSERT INTO spells (name, damage) 
VALUES (?, ?) 
RETURNING id, name, damage, created_at, updated_at
`

type CreateSpellParams struct {
	Name   string
	Damage int64
}

func (q *Queries) CreateSpell(ctx context.Context, arg CreateSpellParams) (Spell, error) {
	row := q.db.QueryRowContext(ctx, createSpell, arg.Name, arg.Damage)
	var i Spell
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Damage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSpell = `-- name: DeleteSpell :exec
DELETE FROM spells 
WHERE id = ?
`

func (q *Queries) DeleteSpell(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSpell, id)
	return err
}

const getSpell = `-- name: GetSpell :one
SELECT id, name, damage, created_at, updated_at FROM spells 
WHERE id = ? LIMIT 1
`

func (q *Queries) GetSpell(ctx context.Context, id int64) (Spell, error) {
	row := q.db.QueryRowContext(ctx, getSpell, id)
	var i Spell
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Damage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSpells = `-- name: GetSpells :many
SELECT id, name, damage, created_at, updated_at FROM spells
`

func (q *Queries) GetSpells(ctx context.Context) ([]Spell, error) {
	rows, err := q.db.QueryContext(ctx, getSpells)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Spell
	for rows.Next() {
		var i Spell
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Damage,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSpell = `-- name: UpdateSpell :one
UPDATE spells 
SET name = ?, damage = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, name, damage, created_at, updated_at
`

type UpdateSpellParams struct {
	Name   string
	Damage int64
	ID     int64
}

func (q *Queries) UpdateSpell(ctx context.Context, arg UpdateSpellParams) (Spell, error) {
	row := q.db.QueryRowContext(ctx, updateSpell, arg.Name, arg.Damage, arg.ID)
	var i Spell
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Damage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
